class matrixI32:
 data:list<list<i32>> = {{}}
class matrixF64:
 data:list<list<f64>> = {{}}
class matrixInt:
 data:list<list<int>> = {{}}
class matrixDouble:
 data:list<list<double>> = {{}}

# help functions to work with matrices.

def zerosOfI32(col_len = int{1}, row_len = int{1}):
 m = matrixI32()
 for c in range(col_len):
  ls = list<i32>()
  for e in range(row_len):
   ls.add(0)
  m.data.add(ls)
 return m
def zerosOfF64(col_len = int{1}, row_len = int{1}):
 m = matrixF64()
 for c in range(col_len):
  ls = list<f64>()
  for e in range(row_len):
   ls.add(0)
  m.data.add(ls)
 return m
def zerosOfInt(col_len = int{1}, row_len = int{1}):
 m = matrixInt()
 for c in range(col_len):
  ls = list<int>()
  for e in range(row_len):
   ls.add(0)
  m.data.add(ls)
 return m
def zerosOfDouble(col_len = int{1}, row_len = int{1}):
 m = matrixDouble()
 for c in range(col_len):
  ls = list<double>()
  for e in range(row_len):
   ls.add(0)
  m.data.add(ls)
 return m
def printMatrix(m = {}):
 for c in range(m.data.len()):
  for e in range(m.data.read(c.data).len()):
   echo(m.data.read(c.data).read(e.data))
   echo(" ")
  echo('\n')
def matrix_I32(m = {}):
 mat = matrixI32()
 mat.data = m
 return mat
def matrix_F64(m = {}):
 mat = matrixF64()
 mat.data = m
 return mat
def toF64(m = {}):
 mat = matrixF64()
 for c in range(m.data.len()):
  ls = list<f64>()
  for e in range(m.data.read(0).len()):
   ls.add(f64(m.data.read(c.data).read(e.data).data))
  mat.data.add(ls)
 return m